"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class AsrTextMessage(object):

    __slots__ = ["timestamp", "text", "confidence", "language"]

    __typenames__ = ["int64_t", "string", "float", "string"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.text = ""
        """
        时间戳
        LCM Type: string
        """

        self.confidence = 0.0
        """
        ASR识别的文本内容
        LCM Type: float
        """

        self.language = ""
        """
        置信度
        LCM Type: string
        """


    def encode(self):
        buf = BytesIO()
        buf.write(AsrTextMessage._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __text_encoded = self.text.encode('utf-8')
        buf.write(struct.pack('>I', len(__text_encoded)+1))
        buf.write(__text_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">f", self.confidence))
        __language_encoded = self.language.encode('utf-8')
        buf.write(struct.pack('>I', len(__language_encoded)+1))
        buf.write(__language_encoded)
        buf.write(b"\0")

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AsrTextMessage._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AsrTextMessage._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = AsrTextMessage()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __text_len = struct.unpack('>I', buf.read(4))[0]
        self.text = buf.read(__text_len)[:-1].decode('utf-8', 'replace')
        self.confidence = struct.unpack(">f", buf.read(4))[0]
        __language_len = struct.unpack('>I', buf.read(4))[0]
        self.language = buf.read(__language_len)[:-1].decode('utf-8', 'replace')
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if AsrTextMessage in parents: return 0
        tmphash = (0x7597f270a2f40a37) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if AsrTextMessage._packed_fingerprint is None:
            AsrTextMessage._packed_fingerprint = struct.pack(">Q", AsrTextMessage._get_hash_recursive([]))
        return AsrTextMessage._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AsrTextMessage._get_packed_fingerprint())[0]

